geom_boxplot()
library(outliers)
# we can clearly see that there are one or more outliers present in the age column.
# I need to get the z-scores for this column
age_zscores <- scores(candy_almost_clean$age)
# I will create a logical vector that is "TRUE" if zscores are greater than 3 or less than -3
is_outlier <- age_zscores > 3 | age_zscores < -3
# I will add a column which shows the outliers
candy_almost_clean <- candy_almost_clean %>%
mutate(is_outlier = is_outlier)
# I have now created a plot showing the outliers and non-outliers separately
ggplot(candy_almost_clean, aes(y = age)) +
geom_boxplot() +
coord_flip() +
facet_wrap(~is_outlier)
# I created a table just with the outliers which clearly shows the age "200587" is present 95 times in the date
age_outliers <- candy_almost_clean %>%
filter(is_outlier == TRUE)
# I removed these outliers by filtering
candy_no_outliers <- candy_almost_clean %>%
filter(is_outlier == FALSE)
# re-check the age data to make sure there are no more weird values
unique(candy_no_outliers$age)
# I found some weird values in the age column and I will now get rid of them. I doubt any of the plausible age values are ages of people who completed the survey the data is based on.
age_na <- candy_no_outliers %>%
mutate(age = replace(age, age == "5", NA)) %>%
mutate(age = replace(age, age == "6", NA)) %>%
mutate(age = replace(age, age == "7", NA)) %>%
mutate(age = replace(age, age == "8", NA)) %>%
mutate(age = replace(age, age == "490", NA)) %>%
mutate(age = replace(age, age == "100", NA)) %>%
mutate(age = replace(age, age == "142", NA)) %>%
mutate(age = replace(age, age == "115", NA)) %>%
mutate(age = replace(age, age == "123", NA)) %>%
mutate(age = replace(age, age == "312", NA)) %>%
mutate(age = replace(age, age == "388", NA)) %>%
mutate(age = replace(age, age == "120", NA)) %>%
mutate(age = replace(age, age == "102", NA)) %>%
mutate(age = replace(age, age == "0", NA)) %>%
mutate(age = replace(age, age == "108", NA)) %>%
mutate(age = replace(age, age == "1000", NA)) %>%
mutate(age = replace(age, age == "350", NA)) %>%
mutate(age = replace(age, age == "2000", NA)) %>%
mutate(age = replace(age, age == "400", NA)) %>%
mutate(age = replace(age, age == "4", NA)) %>%
mutate(age = replace(age, age == "9", NA)) %>%
mutate(age = replace(age, age == "1880", NA)) %>%
mutate(age = replace(age, age == "1", NA))
unique(age_na$age)
# drop NAs from age column
clean_candy <- drop_na(age_na, "age")
# remove outlier column and export
clean_candy_data <- clean_candy %>%
select(-is_outlier)
write_excel(clean_candy_data, here("3_clean_data/clean_candy_data.xlsx"))
write_excel_csv(clean_candy_data, here("3_clean_data/clean_candy_data.xlsx"))
clean_candy_data <- read_xlsx(here("3_clean_data/clean_candy_data.xlsx"))
library(tidyverse)
library(here)
library(readxl)
clean_candy_data <- read_xlsx(here("3_clean_data/clean_candy_data.xlsx"))
clean_candy_data <- read_excel(here("3_clean_data/clean_candy_data.xlsx"))
clean_candy_data <- read_csv(here("3_clean_data/clean_candy_data.xlsx"))
View(clean_candy_data)
unique(clean_candy_data$gender)
clean_candy_data <- read_excel(here("3_clean_data/clean_candy_data.xlsx"))
clean_candy_data <- read_excel(here("3_clean_data/clean_candy_data.xlsx"))
here::here()
clean_candy_data <- read_excel(here("3_clean_data/clean_candy_data.xlsx"))
clean_candy_data <- read_excel(here("3_clean_data/clean_candy_data.xlsx"))
View(clean_candy_data)
library(tidyverse)
library(here)
clean_candy_data <- read_csv(here("3_clean_data/clean_candy_data.csv"),
col_types = cols(gender = col_character(),
country = col_character()))
View(clean_candy_data)
all_ratings <- clean_candy_data %>%
select(emotion) %>%
na.omit(emotion) %>%
count(emotion)
all_ratings
total_ratings <- clean_candy_data %>%
select(emotion) %>%
na.omit(emotion) %>%
summarise(total_ratings = n())
total_ratings
trick_or_treat_age <- clean_candy_data %>%
select(age, trick_or_treat) %>%
group_by(trick_or_treat) %>%
na.omit(trick_or_treat) %>%
summarise(average_age = mean(age))
trick_or_treat_age
clean_candy_data %>%
filter(!is.na(candy)) %>%
filter(!is.na(emotion)) %>%
group_by(emotion, candy) %>%
summarise(count = n()) %>%
filter(count == max(count))
starburst_despair <- clean_candy_data %>%
select(candy, emotion) %>%
filter(candy == "Starburst") %>%
filter(emotion == "DESPAIR") %>%
summarise(depair_ratings_starburst = n())
starburst_despair
unique(clean_candy_data$country)
clean_candy_data <-
clean_candy_data %>%
mutate(emotion_num = recode(emotion, meh = 0, joy = 1, despair = -1))
View(clean_candy_data)
clean_candy_data %>%
group_by(gender, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE)) %>% #remove missing values
filter(avg_rating == max(avg_rating))
clean_candy_data <- read_csv(here("3_clean_data/clean_candy_data.csv"),
col_types = cols(gender = col_character(),
country = col_character()))
library(tidyverse)
library(here)
clean_candy_data <- read_csv(here("3_clean_data/clean_candy_data.csv"),
col_types = cols(gender = col_character(),
country = col_character()))
# I specified the type of column I want these to be treated as.
all_ratings <- clean_candy_data %>%
select(emotion) %>%
na.omit(emotion) %>%
count(emotion)
all_ratings
total_ratings <- clean_candy_data %>%
select(emotion) %>%
na.omit(emotion) %>%
summarise(total_ratings = n())
total_ratings
trick_or_treat_age <- clean_candy_data %>%
select(age, trick_or_treat) %>%
group_by(trick_or_treat) %>%
na.omit(trick_or_treat) %>%
summarise(average_age = mean(age))
trick_or_treat_age
clean_candy_data %>%
filter(!is.na(candy)) %>%
filter(!is.na(emotion)) %>%
group_by(emotion, candy) %>%
summarise(count = n()) %>%
filter(count == max(count))
starburst_despair <- clean_candy_data %>%
select(candy, emotion) %>%
filter(candy == "Starburst") %>%
filter(emotion == "DESPAIR") %>%
summarise(depair_ratings_starburst = n())
starburst_despair
clean_candy_recoded <-
clean_candy_data %>%
mutate(emotion_num = recode(emotion, meh = 0, joy = 1, despair = -1))
clean_candy_data %>%
group_by(gender, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE)) %>% #remove missing values
filter(avg_rating == max(avg_rating))
clean_candy_recoded <-
clean_candy_data %>%
mutate(emotion_num = recode(emotion, meh = 0, joy = 1, despair = -1))
clean_candy_recoded %>%
group_by(gender, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE)) %>% #remove missing values
filter(avg_rating == max(avg_rating))
unique(clean_candy_recoded$gender)
unique(clean_candy_recoded$emotion)
unique(clean_candy_recoded$country)
clean_candy_recoded %>%
group_by(gender, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE)) %>% #remove missing values
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
group_by(gender, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = FALSE)) %>% #remove missing values
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
group_by(gender, candy) %>%
summarise(avg_rating = mean(emotion_num) %>% #remove missing values
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
group_by(gender, candy) %>%
summarise(avg_rating = mean(emotion_num)) %>% #remove missing values
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
group_by(gender, candy) %>%
summarise(avg_rating = mean(emotion_num))
clean_candy_recoded %>%
group_by(gender, candy) %>%
summarise(avg_rating = mean(emotion_num)) %>% #remove missing values
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
group_by(gender, candy) %>%
summarise(avg_rating = mean(emotion_num))
clean_candy_recoded %>%
group_by(gender, candy) %>%
summarise(avg_rating = mean(emotion_num))
clean_candy_recoded %>%
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
group_by(emotion, gender, candy) %>%
summarise(avg_rating = mean(emotion_num))
clean_candy_recoded %>%
group_by(emotion, gender, candy) %>%
summarise(avg_rating = mean(emotion_num)) %>%
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
group_by(emotion, gender, candy) %>%
summarise(avg_rating = mean(emotion_num)) %>%
filter(avg_rating == top_n(avg_rating))
clean_candy_recoded %>%
group_by(emotion, gender, candy) %>%
summarise(avg_rating = mean(emotion_num)) %>%
top_n(avg_rating)
clean_candy_recoded %>%
group_by(emotion, gender, candy) %>%
summarise(avg_rating = mean(emotion_num)) %>%
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
group_by(year, candy) %>%
summarise(
avg_rating = mean(rating_numeric, na.rm = TRUE)
) %>%
filter(avg_rating == max(avg_rating))
View(clean_candy_recoded)
View(clean_candy_data)
View(clean_candy_recoded)
unique(clean_candy_recoded$country)
avg_rating = mean(rating_numeric, na.rm = TRUE)
country %in% c!("US", "UK", "Canada") %>%
country %in% c(!"US", !"UK", !"Canada") %>%
group_by(country, candy) %>%
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"),
country %in% c(!"US", !"UK", !"Canada") %>%
group_by(country, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE)) %>%
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"),
country %in% c(!"US", !"UK", !"Canada"))) %>%
group_by(country, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE)) %>%
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"),
country %in% c!("US", "UK", "Canada"))) %>%
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"),
country %in% !c("US", "UK", "Canada"))) %>%
group_by(country, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE)) %>%
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"),
country !%in% c("US", "UK", "Canada"))) %>%
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"),
!country %in% c("US", "UK", "Canada"))) %>%
group_by(country, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE)) %>%
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"),
country %!in% c("US", "UK", "Canada"))) %>%
group_by(country, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE)) %>%
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"),
country %ni% c("US", "UK", "Canada"))) %>%
group_by(country, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE)) %>%
filter(avg_rating == max(avg_rating))
library(purrr)
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"),
country %ni% c("US", "UK", "Canada"))) %>%
group_by(country, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE)) %>%
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"),
country negate(%in%) c("US", "UK", "Canada"))) %>%
%nin% <- negate(%in%)
install.packages("operators")
library(operators)
```{r, message=FALSE}
library(operators)
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"),
country (%nin%) c("US", "UK", "Canada"))) %>%
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"),
country %nin% c("US", "UK", "Canada"))) %>%
group_by(country, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE)) %>%
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"),
country %nin% c("US", "UK", "Canada"))) %>%
group_by(country, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE)) %>%
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"),
country %nin% c("US", "UK", "Canada"))) %>%
group_by(country, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE))
clean_candy_recoded %>%
group_by(gender, candy) %>%
summarise(avg_rating = mean(emotion_num)) %>% #remove missing values
filter(avg_rating == max(avg_rating))
clean_candy_recoded <-
clean_candy_data %>%
mutate(emotion_num = recode(emotion, meh = 0, joy = 1, despair = -1))
clean_candy_recoded <-
clean_candy_data %>%
mutate(emotion_num = recode(emotion, meh = 0, joy = 1, despair = -1))
clean_candy_data <- read_csv(here("3_clean_data/clean_candy_data.csv"),
col_types = cols(gender = col_character(),
country = col_character()))
# I specified the type of column I want these to be treated as.
clean_candy_recoded <-
clean_candy_data %>%
mutate(emotion_num = recode(emotion, meh = 0, joy = 1, despair = -1))
View(clean_candy_recoded)
View(clean_candy_data)
clean_candy_recoded <-
clean_candy_data %>%
mutate(emotion_num = recode(emotion, meh = 0, joy = 1, despair = -1))
clean_candy_recoded <-
clean_candy_data %>%
mutate(emotion_num = recode(emotion, "meh" = 0, "joy" = 1, "despair" = -1))
clean_candy_recoded <-
clean_candy_data %>%
mutate(emotion_num = recode(emotion, "meh" = 0, "joy" = 1, "despair" = -1))
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion_num = recode(emotion, "meh" = 0, "joy" = 1, "despair" = -1))
library(tidyverse)
library(here)
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion_num = recode(emotion, "meh" = 0, "joy" = 1, "despair" = -1))
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion = recode(emotion_num, "meh" = 0, "joy" = 1, "despair" = -1))
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion = recode(emotion_, "meh" = 0, "joy" = 1, "despair" = -1))
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion = recode(emotion, "meh" = 0, "joy" = 1, "despair" = -1))
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion_num = recode(emotion, "meh" = 0, "joy" = 1, "despair" = -1))
library(operators)
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion_num = recode(emotion, "meh" = 0, "joy" = 1, "despair" = -1))
library(tidyverse)
library(here)
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion_num = recode(emotion, "meh" = 0, "joy" = 1, "despair" = -1))
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion_num = recode(emotion, "meh" = 0, "joy" = 1, "despair" = -1))
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion_num = recode(emotion, "meh" = 0, "joy" = 1, "despair" = -1))
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion_num = recode(emotion, "meh" = 0, "joy" = 1, "despair" = -1))
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion_num = recode(emotion, "meh" = 0, "joy" = 1, "despair" = -1))
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion_num = recode(emotion, "meh" = 0, "joy" = 1, "despair" = -1))
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion_num = recode(emotion, "meh" = 0, "joy" = 1, "despair" = -1))
library(tidyverse)
library(here)
clean_candy_data <- read_csv(here("3_clean_data/clean_candy_data.csv"),
col_types = cols(gender = col_character(),
country = col_character()))
# I specified the type of column I want these to be treated as.
View(clean_candy_data)
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion_num = recode(emotion, "meh" = 0, "joy" = 1, "despair" = -1))
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion_num = recode(emotion, "meh" = 0, "joy" = 1, "despair" = -1))
View(clean_candy_recoded)
unique(clean_candy_recoded$emotion_num)
View(clean_candy_data)
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion_num = recode(emotion, MEH = 0, JOY = 1, DESPAIR = -1))
unique(clean_candy_recoded$emotion_num)
library(operators)
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"),
country %nin% c("US", "UK", "Canada"))) %>%
group_by(country, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE)) %>%
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"),
country %nin% c("US", "UK", "Canada"))) %>%
group_by(country, candy)
library(operators)
clean_candy_recoded %>%
# mutate(country = if_else(country %in% c("US", "UK", "Canada"),
#                          country %nin% c("US", "UK", "Canada"))) %>%
group_by(country, candy)
clean_candy_recoded$country
unique(clean_candy_recoded$country)
library(tidyverse)
clean_candy_recoded %>%
# mutate(country = if_else(country %in% c("US", "UK", "Canada"),
#                          country %nin% c("US", "UK", "Canada"))) %>%
group_by(country, candy)
clean_candy_recoded %>%
# mutate(country = if_else(country %in% c("US", "UK", "Canada"),
#                          country %nin% c("US", "UK", "Canada"))) %>%
group_by(country, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE)) %>%
filter(avg_rating == max(avg_rating))
library(tidyverse)
library(here)
clean_candy_data <- read_csv(here("3_clean_data/clean_candy_data.csv"),
col_types = cols(gender = col_character(),
country = col_character()))
# I specified the type of column I want these to be treated as.
clean_candy_recoded <- clean_candy_data %>%
mutate(emotion_num = recode(emotion, MEH = 0, JOY = 1, DESPAIR = -1))
clean_candy_recoded %>%
# mutate(country = if_else(country %in% c("US", "UK", "Canada"),
#                          country %nin% c("US", "UK", "Canada"))) %>%
group_by(country, candy)
clean_candy_recoded %>%
group_by(gender, candy) %>%
summarise(avg_emotion = mean(emotion_num, na.rm = TRUE)) %>%
filter(avg_emotion == max(avg_emotion))
clean_candy_recoded %>%
group_by(gender, candy) %>%
summarise(avg_emotion = mean(emotion_num)) %>%
filter(avg_emotion == max(avg_emotion))
clean_candy_recoded %>%
group_by(gender, candy) %>%
summarise(avg_emotion = mean(emotion_num)) %>%
filter(avg_emotion == max(avg_emotion))
View(clean_candy_recoded)
clean_candy_recoded %>%
group_by(gender, candy) %>%
summarise(avg_emotion = mean(emotion_num)) %>%
filter(avg_emotion == max(avg_emotion))
clean_candy_recoded %>%
group_by(age, candy) %>%
summarise(avg_emotion = mean(emotion_num)) %>%
filter(avg_emotion == max(avg_emotion))
clean_candy_recoded %>%
group_by(gender, candy) %>%
summarise(avg_emotion = mean(emotion_num)) %>%
filter(avg_emotion == max(avg_emotion))
clean_candy_recoded %>%
# mutate(country = if_else(country %in% c("US", "UK", "Canada"),
#                          country %nin% c("US", "UK", "Canada"))) %>%
group_by(country, candy) %>%
summarise(avg_rating = mean(emotion_num, na.rm = TRUE)) %>%
filter(avg_rating == max(avg_rating))
clean_candy_recoded %>%
mutate(country = if_else(country %in% c("US", "UK", "Canada"), country, "other")) %>%
group_by(country, candy) %>%
summarise(
avg_rating = mean(emotion_num, na.rm = TRUE)
) %>%
filter(avg_rating == max(avg_rating))
library(tidyverse)
library(here)
clean_candy_data <- read_csv(here("3_clean_data/clean_candy_data.csv"),
col_types = cols(gender = col_character(),
country = col_character()))
# I specified the type of column I want these to be treated as.
all_ratings <- clean_candy_data %>%
select(emotion) %>%
na.omit(emotion) %>%
count(emotion)
all_ratings
total_ratings <- clean_candy_data %>%
select(emotion) %>%
na.omit(emotion) %>%
summarise(total_ratings = n())
total_ratings
trick_or_treat_age <- clean_candy_data %>%
select(age, trick_or_treat) %>%
group_by(trick_or_treat) %>%
na.omit(trick_or_treat) %>%
summarise(average_age = mean(age))
trick_or_treat_age
clean_candy_data %>%
filter(!is.na(candy)) %>%
filter(!is.na(emotion)) %>%
group_by(emotion, candy) %>%
summarise(count = n()) %>%
filter(count == max(count))
starburst_despair <- clean_candy_data %>%
select(candy, emotion) %>%
filter(candy == "Starburst") %>%
filter(emotion == "DESPAIR") %>%
summarise(depair_ratings_starburst = n())
starburst_despair
View(clean_candy_data)
clean_candy_data %>%
filter(!is.na(country)) %>%
group_by(emotion, candy) %>%
summarise(count = n()) %>%
filter(count == max(count))
clean_candy_data %>%
filter(!is.na(country)) %>%
group_by(country) %>%
summarise(count = n()) %>%
filter(count == max(count))
